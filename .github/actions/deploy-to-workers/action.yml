name: 'Deploy to Cloudflare Workers'
description: 'Deploys Next.js application to Cloudflare Workers using Wrangler'
author: 'Simplify9'

inputs:
  worker-name:
    description: 'Name of the Cloudflare Worker'
    required: true
  
  environment:
    description: 'Deployment environment (development, staging, production)'
    required: false
    default: 'development'
  
  api-token:
    description: 'Cloudflare API token'
    required: true
  
  account-id:
    description: 'Cloudflare account ID'
    required: true
  
  environment-variables:
    description: 'Environment variables to set (JSON format)'
    required: false
    default: '{}'
  
  dry-run:
    description: 'Perform a dry run without actually deploying'
    required: false
    default: 'false'

outputs:
  deployment-url:
    description: 'URL of the deployed worker'
    value: ${{ steps.deploy.outputs.url }}
  
  worker-name:
    description: 'Full worker name used for deployment'
    value: ${{ steps.deploy.outputs.worker-name }}
  
  deployment-id:
    description: 'Deployment ID from Cloudflare'
    value: ${{ steps.deploy.outputs.deployment-id }}

runs:
  using: 'composite'
  steps:
    - name: Validate deployment inputs
      shell: bash
      run: |
        echo "🔍 Validating deployment inputs..."
        
        # Check if wrangler.toml exists
        if [ ! -f "wrangler.toml" ]; then
          echo "❌ wrangler.toml not found. Please configure the worker project first."
          exit 1
        fi
        
        # Check if worker entry point exists
        if [ ! -f ".next/server/worker.js" ]; then
          echo "❌ Worker entry point not found. Please configure the worker project first."
          exit 1
        fi
        
        # Validate environment
        if [[ ! "${{ inputs.environment }}" =~ ^(development|staging|production)$ ]]; then
          echo "❌ Invalid environment: ${{ inputs.environment }}. Must be development, staging, or production."
          exit 1
        fi
        
        echo "✅ Deployment inputs validated successfully"

    - name: Set environment variables
      shell: bash
      if: inputs.environment-variables != '{}'
      run: |
        echo "🔧 Setting environment variables..."
        
        # Parse and set environment variables
        echo '${{ inputs.environment-variables }}' | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read -r var; do
          if [ -n "$var" ]; then
            key=$(echo "$var" | cut -d'=' -f1)
            value=$(echo "$var" | cut -d'=' -f2-)
            
            echo "Setting $key..."
            echo "$value" | wrangler secret put "$key" --env ${{ inputs.environment }}
          fi
        done
        
        echo "✅ Environment variables configured"
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.api-token }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.account-id }}

    - name: Deploy to Cloudflare Workers
      shell: bash
      id: deploy
      run: |
        echo "🚀 Deploying to Cloudflare Workers..."
        
        # Prepare deployment command
        DEPLOY_CMD="wrangler deploy --env ${{ inputs.environment }}"
        
        if [ "${{ inputs.dry-run }}" = "true" ]; then
          DEPLOY_CMD="$DEPLOY_CMD --dry-run"
          echo "🧪 Performing dry run deployment..."
        fi
        
        # Execute deployment
        DEPLOYMENT_OUTPUT=$(eval "$DEPLOY_CMD" 2>&1)
        DEPLOY_EXIT_CODE=$?
        
        echo "$DEPLOYMENT_OUTPUT"
        
        if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
          echo "❌ Deployment failed with exit code $DEPLOY_EXIT_CODE"
          exit $DEPLOY_EXIT_CODE
        fi
        
        # Extract deployment information
        DEPLOYMENT_URL=$(echo "$DEPLOYMENT_OUTPUT" | grep -oE 'https://[a-zA-Z0-9.-]+\.workers\.dev' | head -1)
        DEPLOYMENT_ID=$(echo "$DEPLOYMENT_OUTPUT" | grep -oE 'deployment-id: [a-zA-Z0-9-]+' | cut -d' ' -f2 | head -1)
        
        # Fallback URL construction if not found in output
        if [ -z "$DEPLOYMENT_URL" ]; then
          case "${{ inputs.environment }}" in
            production)
              DEPLOYMENT_URL="https://${{ inputs.worker-name }}.workers.dev"
              ;;
            *)
              DEPLOYMENT_URL="https://${{ inputs.worker-name }}-${{ inputs.environment }}.workers.dev"
              ;;
          esac
        fi
        
        # Set outputs
        echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "worker-name=${{ inputs.worker-name }}" >> $GITHUB_OUTPUT
        echo "deployment-id=${DEPLOYMENT_ID:-unknown}" >> $GITHUB_OUTPUT
        
        if [ "${{ inputs.dry-run }}" = "true" ]; then
          echo "✅ Dry run completed successfully"
        else
          echo "✅ Deployed successfully to: $DEPLOYMENT_URL"
        fi
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.api-token }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.account-id }}

    - name: Verify deployment
      shell: bash
      if: inputs.dry-run != 'true'
      run: |
        echo "🧪 Verifying deployment..."
        
        DEPLOYMENT_URL="${{ steps.deploy.outputs.url }}"
        
        if [ -n "$DEPLOYMENT_URL" ]; then
          # Wait for deployment to be ready
          echo "Waiting for deployment to be ready..."
          sleep 15
          
          # Test the worker endpoint
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL" || echo "000")
          
          if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 400 ]; then
            echo "✅ Worker is responding successfully (HTTP $HTTP_STATUS)"
          elif [ "$HTTP_STATUS" -ge 400 ] && [ "$HTTP_STATUS" -lt 500 ]; then
            echo "⚠️ Worker is accessible but returned client error (HTTP $HTTP_STATUS)"
            echo "This might be expected for some Next.js routes"
          else
            echo "⚠️ Worker verification failed (HTTP $HTTP_STATUS)"
            echo "The worker may still be deploying or might have configuration issues"
          fi
        else
          echo "⚠️ No deployment URL available for verification"
        fi

    - name: Display deployment summary
      shell: bash
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Worker**: ${{ inputs.worker-name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ inputs.dry-run }}" = "true" ]; then
          echo "- **Mode**: Dry Run ✅" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Deployment URL**: ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment ID**: ${{ steps.deploy.outputs.deployment-id }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🛠️ Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: Cloudflare Workers" >> $GITHUB_STEP_SUMMARY
        echo "- **Runtime**: Edge Runtime" >> $GITHUB_STEP_SUMMARY
        echo "- **Global Distribution**: ✅ Deployed to all edge locations" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ inputs.environment-variables }}" != '{}' ]; then
          echo "- **Environment Variables**: ✅ Configured" >> $GITHUB_STEP_SUMMARY
        fi