name: 'Configure Cloudflare Compatibility Flags'
description: 'Sets up nodejs_compat and other required flags for Next.js on Cloudflare Pages'
author: 'simplify9'

inputs:
  api-token:
    description: 'Cloudflare API token'
    required: true
  account-id:
    description: 'Cloudflare account ID'
    required: true
  project-name:
    description: 'Name of the Cloudflare Pages project'
    required: true
  compatibility-date:
    description: 'Cloudflare Workers compatibility date'
    required: false
    default: '2024-10-20'
  compatibility-flags:
    description: 'Comma-separated list of compatibility flags'
    required: false
    default: 'nodejs_compat'

outputs:
  configured:
    description: 'Whether compatibility flags were successfully configured'
    value: ${{ steps.configure-flags.outputs.configured }}
  flags-applied:
    description: 'List of flags that were applied'
    value: ${{ steps.configure-flags.outputs.flags }}

runs:
  using: 'composite'
  steps:
    - name: Install jq for JSON parsing
      shell: bash
      run: |
        if ! command -v jq &> /dev/null; then
          if [ "$(uname)" == "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y jq
          elif [ "$(uname)" == "Darwin" ]; then
            brew install jq 2>/dev/null || echo "jq installation failed, but may already be available"
          fi
        fi

    - name: Configure Next.js compatibility flags
      id: configure-flags
      shell: bash
      run: |
        echo "🔧 Setting up compatibility flags for Next.js SSR..."
        
        # Parse comma-separated flags into JSON array
        FLAGS_INPUT="${{ inputs.compatibility-flags }}"
        FLAGS_JSON=$(echo "$FLAGS_INPUT" | tr ',' '\n' | jq -R . | jq -s .)
        
        echo "📋 Flags to apply: $FLAGS_JSON"
        echo "📅 Compatibility date: ${{ inputs.compatibility-date }}"
        
        # Get current project settings
        echo "🔍 Fetching current project settings..."
        PROJECT_RESPONSE=$(curl -s -X GET \
          "https://api.cloudflare.com/client/v4/accounts/${{ inputs.account-id }}/pages/projects/${{ inputs.project-name }}" \
          -H "Authorization: Bearer ${{ inputs.api-token }}" \
          -H "Content-Type: application/json")
        
        # Check if project exists and API call succeeded
        if echo "$PROJECT_RESPONSE" | jq -e '.success' > /dev/null; then
          echo "✅ Project found, updating compatibility flags..."
          
          # Update production environment
          echo "🔄 Updating production environment..."
          PROD_RESPONSE=$(curl -s -X PATCH \
            "https://api.cloudflare.com/client/v4/accounts/${{ inputs.account-id }}/pages/projects/${{ inputs.project-name }}" \
            -H "Authorization: Bearer ${{ inputs.api-token }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"deployment_configs\": {
                \"production\": {
                  \"compatibility_flags\": $FLAGS_JSON,
                  \"compatibility_date\": \"${{ inputs.compatibility-date }}\"
                },
                \"preview\": {
                  \"compatibility_flags\": $FLAGS_JSON,
                  \"compatibility_date\": \"${{ inputs.compatibility-date }}\"
                }
              }
            }")
          
          # Check if update was successful
          if echo "$PROD_RESPONSE" | jq -e '.success' > /dev/null; then
            echo "✅ Compatibility flags configured successfully"
            echo "🎯 Applied flags: $FLAGS_INPUT"
            echo "🎯 Compatibility date: ${{ inputs.compatibility-date }}"
            echo "🎯 Environments: production, preview"
            
            echo "configured=true" >> $GITHUB_OUTPUT
            echo "flags=$FLAGS_INPUT" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to update compatibility flags"
            echo "Response: $PROD_RESPONSE"
            echo "configured=false" >> $GITHUB_OUTPUT
            
            # Don't fail the job, just warn
            echo "⚠️ Compatibility flags may need to be set manually in Cloudflare dashboard"
            echo "⚠️ Go to Pages project → Settings → Functions → Compatibility flags"
            echo "⚠️ Add: $FLAGS_INPUT"
          fi
        else
          echo "❌ Could not find project or API call failed"
          echo "Project response: $PROJECT_RESPONSE"
          echo "configured=false" >> $GITHUB_OUTPUT
          
          # Don't fail the job, just provide instructions
          echo "⚠️ Please manually set compatibility flags in Cloudflare dashboard:"
          echo "   1. Go to Cloudflare Pages → ${{ inputs.project-name }}"
          echo "   2. Settings → Functions → Compatibility flags"
          echo "   3. Add flags: $FLAGS_INPUT"
          echo "   4. Set compatibility date: ${{ inputs.compatibility-date }}"
        fi

    - name: Verify configuration
      shell: bash
      run: |
        echo ""
        echo "📋 Configuration Summary:"
        echo "   Project: ${{ inputs.project-name }}"
        echo "   Flags: ${{ inputs.compatibility-flags }}"
        echo "   Date: ${{ inputs.compatibility-date }}"
        echo "   Status: ${{ steps.configure-flags.outputs.configured }}"
        echo ""
        
        if [ "${{ steps.configure-flags.outputs.configured }}" = "true" ]; then
          echo "🎉 Next.js is now properly configured for Cloudflare Pages!"
          echo "🚀 Your SSR application should work correctly"
        else
          echo "⚠️  Manual configuration may be required"
          echo "📖 See Cloudflare Pages documentation for manual setup"
        fi