name: 'Configure Cloudflare Workers Project'
description: 'Generates wrangler.toml configuration and worker entry point for Next.js'
author: 'Simplify9'

inputs:
  worker-name:
    description: 'Name of the Cloudflare Worker'
    required: true
  
  compatibility-date:
    description: 'Cloudflare Workers compatibility date'
    required: false
    default: '2024-10-20'
  
  compatibility-flags:
    description: 'Cloudflare Workers compatibility flags'
    required: false
    default: 'nodejs_compat'
  
  build-command:
    description: 'Build command for the project'
    required: false
    default: 'npm run build'
  
  output-directory:
    description: 'Next.js build output directory'
    required: false
    default: '.next'
  
  custom-routes:
    description: 'Custom routes configuration (optional)'
    required: false
    default: ''
  
  environment:
    description: 'Deployment environment'
    required: false
    default: 'development'

outputs:
  config-file:
    description: 'Path to generated wrangler.toml file'
    value: ${{ steps.generate.outputs.config-file }}
  
  entry-point:
    description: 'Path to generated worker entry point'
    value: 'worker.js'

runs:
  using: 'composite'
  steps:
    - name: Generate wrangler.toml configuration
      shell: bash
      id: generate
      run: |
        echo "📝 Generating wrangler.toml configuration..."
        
        # Create wrangler.toml
        cat > wrangler.toml << EOF
        name = "${{ inputs.worker-name }}"
        main = "worker.js"
        compatibility_date = "${{ inputs.compatibility-date }}"
        compatibility_flags = ["${{ inputs.compatibility-flags }}"]
        
        # Assets configuration for Next.js static files
        [site]
        bucket = ".next/static"
        
        # Default route pattern
        [[routes]]
        pattern = "*"
        zone_name = ""
        
        # Environment-specific configurations
        [env.production]
        name = "${{ inputs.worker-name }}-prod"
        
        [env.production.vars]
        NODE_ENV = "production"
        ENVIRONMENT = "production"
        
        [env.staging]
        name = "${{ inputs.worker-name }}-staging"
        
        [env.staging.vars]
        NODE_ENV = "staging"
        ENVIRONMENT = "staging"
        
        [env.development]
        name = "${{ inputs.worker-name }}-dev"
        
        [env.development.vars]
        NODE_ENV = "development"
        ENVIRONMENT = "development"
        EOF
        
        # Add custom routes if provided
        if [ -n "${{ inputs.custom-routes }}" ]; then
          echo "" >> wrangler.toml
          echo "# Custom routes configuration" >> wrangler.toml
          echo "${{ inputs.custom-routes }}" >> wrangler.toml
        fi
        
        echo "config-file=wrangler.toml" >> $GITHUB_OUTPUT
        echo "✅ Created wrangler.toml configuration"

    - name: Create custom worker entry point
      shell: bash
      run: |
        echo "🔨 Creating custom worker entry point..."
        
        cat > worker.js << 'EOF'
        /**
         * Cloudflare Worker for Next.js Application
         * This worker serves the Next.js application at the edge
         */
        
        export default {
          async fetch(request, env, ctx) {
            const url = new URL(request.url);
            
            // Handle static assets
            if (url.pathname.startsWith('/_next/static/')) {
              // Serve static files (these would be uploaded as assets)
              return new Response('Static file not found', { status: 404 });
            }
            
            // Handle API routes
            if (url.pathname.startsWith('/api/')) {
              return handleApiRoute(request, env, ctx);
            }
            
            // Handle page routes
            return handlePageRoute(request, env, ctx);
          }
        };
        
        async function handleApiRoute(request, env, ctx) {
          // API route handling logic
          const url = new URL(request.url);
          
          // Basic API response
          return new Response(
            JSON.stringify({ 
              message: 'API route',
              path: url.pathname,
              method: request.method 
            }),
            { 
              headers: { 'Content-Type': 'application/json' },
              status: 200 
            }
          );
        }
        
        async function handlePageRoute(request, env, ctx) {
          // Basic HTML response for pages
          const url = new URL(request.url);
          
          const html = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>Next.js on Cloudflare Workers</title>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1">
        </head>
        <body>
          <div id="__next">
            <h1>Next.js Application</h1>
            <p>Running on Cloudflare Workers</p>
            <p>Path: ${url.pathname}</p>
            <p>This is a basic worker implementation. You can extend this to integrate with your Next.js build output.</p>
          </div>
        </body>
        </html>`;
        
          return new Response(html, {
            headers: { 'Content-Type': 'text/html' },
            status: 200
          });
        }
        EOF
        
        echo "✅ Created custom worker entry point"

    - name: Validate configuration
      shell: bash
      run: |
        echo "🔍 Validating worker configuration..."
        
        # Check if wrangler.toml exists and has required fields
        if [ ! -f "wrangler.toml" ]; then
          echo "❌ wrangler.toml not found"
          exit 1
        fi
        
        # Basic validation of wrangler.toml structure
        if grep -q "name.*=.*\"${{ inputs.worker-name }}\"" wrangler.toml && \
           grep -q "main.*=.*\"worker.js\"" wrangler.toml && \
           grep -q "compatibility_date" wrangler.toml; then
          echo "✅ wrangler.toml configuration structure is valid"
        else
          echo "❌ wrangler.toml is missing required fields"
          echo "Generated wrangler.toml content:"
          cat wrangler.toml
          exit 1
        fi
        
        # Check if worker entry point exists
        if [ -f "worker.js" ]; then
          echo "✅ Worker entry point created successfully"
        else
          echo "❌ Failed to create worker entry point"
          exit 1
        fi

    - name: Display configuration summary
      shell: bash
      run: |
        echo "📋 Worker Configuration Summary:"
        echo "- Worker Name: ${{ inputs.worker-name }}"
        echo "- Environment: ${{ inputs.environment }}"
        echo "- Compatibility Date: ${{ inputs.compatibility-date }}"
        echo "- Compatibility Flags: ${{ inputs.compatibility-flags }}"
        echo "- Entry Point: .next/server/worker.js"
        echo ""
        echo "Generated wrangler.toml:"
        cat wrangler.toml
        
        echo "## ⚙️ Workers Project Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Worker Name**: ${{ inputs.worker-name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Compatibility Date**: ${{ inputs.compatibility-date }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Entry Point**: worker.js (custom worker script)" >> $GITHUB_STEP_SUMMARY
        echo "- **Configuration**: wrangler.toml ✅" >> $GITHUB_STEP_SUMMARY