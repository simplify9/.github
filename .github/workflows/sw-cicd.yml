name: 'Reusable SW CI/CD Pipeline'

on:
  workflow_call:
    inputs:
      # Version configuration
      major-version:
        description: 'Major version number'
        required: false
        default: '1'
        type: string
      minor-version:
        description: 'Minor version number'
        required: false
        default: '0'
        type: string
      
      # .NET Build configuration
      dotnet-version:
        description: 'Dotnet version to use'
        required: false
        default: '8.0.x'
        type: string
      nuget-projects:
        description: 'NuGet projects to pack and push (glob pattern). Leave empty to skip NuGet publishing.'
        required: false
        default: ''
        type: string
      test-projects:
        description: 'Test projects to run (glob pattern)'
        required: false
        default: '**/*UnitTests/*.csproj'
        type: string
      run-tests:
        description: 'Whether to run tests'
        required: false
        default: 'false'
        type: string
      
      # Docker configuration
      dockerfile-path:
        description: 'Path to Dockerfile'
        required: false
        default: './Dockerfile'
        type: string
      docker-context:
        description: 'Docker build context'
        required: false
        default: '.'
        type: string
      docker-platforms:
        description: 'Target platforms for Docker build'
        required: false
        default: 'linux/amd64'
        type: string
      
      # Helm configuration
      chart-path:
        description: 'Path to Helm chart directory'
        required: false
        default: './chart'
        type: string
      chart-name:
        description: 'Helm chart name'
        required: true
        type: string
      
      # Deployment configuration
      deploy-to-development:
        description: 'Deploy to development environment'
        required: false
        default: true
        type: boolean
      development-namespace:
        description: 'Kubernetes namespace for development'
        required: false
        default: 'development'
        type: string
      
      # Registry configuration
      container-registry:
        description: 'Container registry (docker.io, ghcr.io, etc.)'
        required: false
        default: 'ghcr.io'
        type: string
      image-name:
        description: 'Docker image name (will use repository name if not provided)'
        required: false
        type: string
      
      # Deployment values
      helm-set-values:
        description: 'Additional Helm set values (comma-separated: key1=value1,key2=value2)'
        required: false
        type: string
      helm-secret-mappings:
        description: |
          Map GitHub secrets to Helm values using a flexible format.
          Format: 'helm.key1:SECRET_NAME1,helm.key2:SECRET_NAME2'
          Example: 'db:DATABASE_CONNECTION_STRING,apiKey:API_KEY_SECRET,redis.url:REDIS_URL'
          The workflow will fetch the secret values and pass them safely to Helm as --set helm.key1="secret_value"
          Any secret name can be used - no predefined list required.
        required: false
        type: string

    secrets:
      # NuGet secrets
      nuget-api-key:
        description: 'NuGet API key'
        required: false
      nuget-source:
        description: 'NuGet source URL'
        required: false
      
      # Container registry secrets
      registry-username:
        description: 'Container registry username'
        required: false
      registry-password:
        description: 'Container registry password/token'
        required: false
      
      # Kubernetes secrets
      kubeconfig:
        description: 'Base64 encoded kubeconfig'
        required: false
      
      # GitHub token for tagging
      github-token:
        description: 'GitHub token for tagging'
        required: false
      
      # Secret deployment values
      helm-set-secret-values:
        description: 'Additional Helm set secret values (comma-separated: key1=value1,key2=value2)'
        required: false

    # Note: For helm-secret-mappings, use 'secrets: inherit' or pass specific secrets
    # The workflow will dynamically access any secret specified in the mapping
    # Format: 'helm.key:SECRET_NAME' - any secret name can be used

    outputs:
      version:
        description: 'Generated semantic version'
        value: ${{ jobs.version.outputs.version }}
      docker-image:
        description: 'Built Docker image with tag'
        value: ${{ jobs.ci.outputs.docker-image }}
      helm-chart:
        description: 'Published Helm chart URL'
        value: ${{ jobs.ci.outputs.helm-chart }}

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semver.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine semantic version
        id: semver
        uses: simplify9/.github/.github/actions/determine-semver@main
        with:
          major: ${{ inputs.major-version }}
          minor: ${{ inputs.minor-version }}
 
      - name: Tag new version on GitHub origin
        uses: simplify9/.github/.github/actions/tag-github-origin@main
        with:
          github-token: ${{ secrets.github-token || secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          tag: ${{ steps.semver.outputs.version }}
          sha: ${{ github.sha }}

  nuget:
    runs-on: ubuntu-latest
    needs: version
    if: ${{ inputs.nuget-projects != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dotnet Restore, Build, and Test
        uses: simplify9/.github/.github/actions/dotnet-build@main
        with:
          projects: "**/*.csproj"
          test-projects: ${{ inputs.test-projects }}
          configuration: "Release"
          dotnet-version: ${{ inputs.dotnet-version }}
          run-tests: ${{ inputs.run-tests }}

      - name: Pack and Push NuGet Package
        uses: simplify9/.github/.github/actions/dotnet-pack-push@main
        with:
          projects: ${{ inputs.nuget-projects }}
          configuration: "Release"
          version: ${{ needs.version.outputs.version }}
          api-key: ${{ secrets.nuget-api-key }}
          nuget-source: ${{ secrets.nuget-source || 'https://api.nuget.org/v3/index.json' }}

  ci:
    runs-on: ubuntu-latest
    needs: version
    env:
      CONTAINER_REGISTRY: ${{ inputs.container-registry }}
      IMAGE_NAME: ${{ inputs.image-name || github.repository }}
    outputs:
      docker-image: ${{ steps.docker.outputs.image-tags }}
      helm-chart: ${{ steps.helm.outputs.chart-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and push Docker image
        id: docker
        uses: simplify9/.github/.github/actions/docker-build-push@main
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          image-name: ${{ env.IMAGE_NAME }}
          version: ${{ needs.version.outputs.version }}
          username: ${{ secrets.registry-username || github.actor }}
          password: ${{ secrets.registry-password || secrets.GITHUB_TOKEN }}
          dockerfile: ${{ inputs.dockerfile-path }}
          context: ${{ inputs.docker-context }}
          platforms: ${{ inputs.docker-platforms }}

      - name: Package and push Helm chart
        id: helm
        uses: simplify9/.github/.github/actions/helm-package-push@main
        with:
          chart-name: ${{ inputs.chart-name }}
          chart-path: ${{ inputs.chart-path }}
          version: ${{ needs.version.outputs.version }}
          registry: ${{ env.CONTAINER_REGISTRY }}
          repository: ${{ github.repository_owner }}/charts
          username: ${{ secrets.registry-username || github.actor }}
          password: ${{ secrets.registry-password || secrets.GITHUB_TOKEN }}
          image-repository: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}
          image-tag: ${{ needs.version.outputs.version }}
          update-image-values: 'true'

  deploy-development:
    runs-on: ubuntu-latest
    needs: [version, ci]
    if: ${{ inputs.deploy-to-development }}
    environment: development
    env:
      CONTAINER_REGISTRY: ${{ inputs.container-registry }}
    steps:
      - name: Prepare Helm values
        id: helm-values
        env:
          # Pass all secrets as environment variables for dynamic access
          HELM_SECRET_MAPPINGS: ${{ inputs.helm-secret-mappings }}
          SECRETS_JSON: ${{ toJSON(secrets) }}
        run: |
          VALUES='${{ inputs.helm-set-values || '' }}'
          SECRET_VALUES='${{ secrets.helm-set-secret-values || '' }}'
          
          echo "DEBUG: Raw VALUES input: '$VALUES'"
          echo "DEBUG: Raw SECRET_VALUES input: '[REDACTED]'"
          echo "DEBUG: Secret mappings provided: $([ -n "$HELM_SECRET_MAPPINGS" ] && echo 'YES' || echo 'NO')"
          
          # Start building the combined values
          COMBINED_VALUES=""
          
          # Add regular values
          if [[ -n "$VALUES" ]]; then
            COMBINED_VALUES="$VALUES"
            echo "DEBUG: Added VALUES"
          fi
          
          # Add secret values
          if [[ -n "$SECRET_VALUES" ]]; then
            if [[ -n "$COMBINED_VALUES" ]]; then
              COMBINED_VALUES="${COMBINED_VALUES},${SECRET_VALUES}"
            else
              COMBINED_VALUES="$SECRET_VALUES"
            fi
            echo "DEBUG: Added SECRET_VALUES"
          fi
          
          # Process generic secret mappings
          if [[ -n "$HELM_SECRET_MAPPINGS" ]]; then
            echo "DEBUG: Processing secret mappings: $HELM_SECRET_MAPPINGS"
            
            # Split on commas and process each mapping
            IFS=',' read -ra MAPPINGS <<< "$HELM_SECRET_MAPPINGS"
            for mapping in "${MAPPINGS[@]}"; do
              # Split on : to get helm_key:SECRET_NAME
              if [[ "$mapping" == *":"* ]]; then
                helm_key=$(echo "$mapping" | cut -d':' -f1 | xargs)
                secret_name=$(echo "$mapping" | cut -d':' -f2 | xargs)
                
                echo "DEBUG: Processing mapping: $helm_key <- $secret_name"
                
                # Extract the secret value from the JSON using jq
                secret_value=$(echo "$SECRETS_JSON" | jq -r --arg key "$secret_name" '.[$key] // empty')
                
                if [[ -n "$secret_value" && "$secret_value" != "null" ]]; then
                  # Use the secret value directly without additional escaping
                  # Helm will handle the proper escaping when we pass it as --set parameter
                  secret_helm_value="${helm_key}=${secret_value}"
                  
                  if [[ -n "$COMBINED_VALUES" ]]; then
                    COMBINED_VALUES="${COMBINED_VALUES},${secret_helm_value}"
                  else
                    COMBINED_VALUES="$secret_helm_value"
                  fi
                  echo "DEBUG: Added secret mapping: $helm_key"
                else
                  echo "DEBUG: Secret '$secret_name' is empty or not found, skipping"
                fi
              else
                echo "WARNING: Invalid mapping format '$mapping'. Expected 'helm.key:SECRET_NAME'"
              fi
            done
          fi
          
          echo "DEBUG: Final COMBINED_VALUES length: ${#COMBINED_VALUES}"
          echo "values=$COMBINED_VALUES" >> $GITHUB_OUTPUT

      - name: Debug Helm values before deployment
        run: |
          VALUES_LENGTH="${#HELM_VALUES}"
          echo "DEBUG: Values being passed to helm-deploy (length: $VALUES_LENGTH characters)"
          echo "DEBUG: Chart name: '${{ inputs.chart-name }}'"
          echo "DEBUG: Chart version: '${{ needs.version.outputs.version }}'"
          echo "DEBUG: Registry: '${{ env.CONTAINER_REGISTRY }}'"
        env:
          HELM_VALUES: ${{ steps.helm-values.outputs.values }}

      - name: Deploy to Development
        uses: simplify9/.github/.github/actions/helm-deploy@main
        with:
          chart-name: ${{ inputs.chart-name }}
          chart-version: ${{ needs.version.outputs.version }}
          registry: ${{ env.CONTAINER_REGISTRY }}
          repository: ${{ github.repository_owner }}/charts
          registry-username: ${{ secrets.registry-username || github.actor }}
          registry-password: ${{ secrets.registry-password || secrets.GITHUB_TOKEN }}
          kubeconfig: ${{ secrets.kubeconfig }}
          release-name: ${{ inputs.chart-name }}-dev
          namespace: ${{ inputs.development-namespace }}
          set-values: ${{ steps.helm-values.outputs.values }}
          timeout: '10m'